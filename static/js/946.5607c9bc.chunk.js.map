{"version":3,"file":"static/js/946.5607c9bc.chunk.js","mappings":"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","sources":["components/atoms/CloudinaryImage/CloudinaryImage.jsx","components/admin/navigation/AdminNavigation.jsx","stores/adminGalleryStore.js","components/admin/gallery/GalleryImagesList.jsx","components/admin/gallery/GalleryImageEditor.jsx","components/admin/gallery/GalleryUploadModal.jsx","pages/admin/GalleryManager.jsx"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n/**\r\n * CloudinaryImage - Optimized image component using Cloudinary\r\n * Simplified version for granite paving gallery\r\n */\r\nconst CloudinaryImage = ({\r\n  publicId,\r\n  alt = 'Granite paving project',\r\n  width = 800,\r\n  height = 600,\r\n  className = '',\r\n  quality = 'auto',\r\n  format = 'auto',\r\n  responsive = false,\r\n  onClick,\r\n  onLoad,\r\n  onError,\r\n  ...props\r\n}) => {\r\n  // Get cloud name from environment or use production default\r\n  const cloudName = process.env.REACT_APP_CLOUDINARY_CLOUD_NAME || 'dsunqfo3g'\r\n\r\n  // Build optimized Cloudinary URL with responsive support\r\n  const buildImageUrl = (w, h) => {\r\n    if (responsive) {\r\n      // For responsive images, use different crop modes based on screen size\r\n      const isMobile = window.innerWidth <= 768\r\n      const cropMode = isMobile ? 'c_fill,g_center' : 'c_fit'\r\n      return `https://res.cloudinary.com/${cloudName}/image/upload/w_${w},h_${h},${cropMode},f_${format},q_${quality}/${publicId}`\r\n    }\r\n    return `https://res.cloudinary.com/${cloudName}/image/upload/w_${w},h_${h},c_fill,f_${format},q_${quality}/${publicId}`\r\n  }\r\n\r\n  const imageUrl = buildImageUrl(width, height)\r\n\r\n  return (\r\n    <img\r\n      src={imageUrl}\r\n      alt={alt}\r\n      className={className}\r\n      width={width}\r\n      height={height}\r\n      loading=\"lazy\"\r\n      onClick={onClick}\r\n      onLoad={onLoad}\r\n      onError={onError}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nCloudinaryImage.propTypes = {\r\n  publicId: PropTypes.string.isRequired,\r\n  alt: PropTypes.string,\r\n  width: PropTypes.number,\r\n  height: PropTypes.number,\r\n  className: PropTypes.string,\r\n  quality: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  format: PropTypes.string,\r\n  responsive: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  onLoad: PropTypes.func,\r\n  onError: PropTypes.func\r\n}\r\n\r\nexport default CloudinaryImage","import React from 'react'\r\nimport { Link, useNavigate, useLocation } from 'react-router-dom'\r\nimport useAuthStore from '../../../stores/authStore'\r\nimport './AdminNavigation.scss'\r\n\r\nconst AdminNavigation = ({ pageType = '' }) => {\r\n  const navigate = useNavigate()\r\n  const location = useLocation()\r\n  const { logout } = useAuthStore()\r\n\r\n  const handleLogout = () => {\r\n    logout()\r\n    navigate('/admin')\r\n  }\r\n\r\n  // Налаштування для різних типів сторінок\r\n  const getPageConfig = () => {\r\n    const currentPath = location.pathname\r\n\r\n    if (currentPath.includes('/admin/products')) {\r\n      return {\r\n        title: 'Управління продуктами',\r\n        siteLink: '/ua/products',\r\n        siteLinkText: 'Переглянути каталог продуктів'\r\n      }\r\n    } else if (currentPath.includes('/admin/gallery')) {\r\n      return {\r\n        title: 'Управління галереєю',\r\n        siteLink: '/ua/gallery',\r\n        siteLinkText: 'Переглянути галерею проектів'\r\n      }\r\n    } else if (currentPath.includes('/admin/articles')) {\r\n      return {\r\n        title: 'Управління статтями',\r\n        siteLink: '/ua/articles',\r\n        siteLinkText: 'Переглянути статті блогу'\r\n      }\r\n    } else {\r\n      return {\r\n        title: 'Адміністративна панель',\r\n        siteLink: '/ua',\r\n        siteLinkText: 'Перейти на головну сторінку сайту'\r\n      }\r\n    }\r\n  }\r\n\r\n  const config = getPageConfig()\r\n\r\n  return (\r\n    <div className=\"admin-navigation\">\r\n      <div className=\"admin-nav-container\">\r\n        {/* Логотип та назва */}\r\n        <div className=\"admin-nav-brand\">\r\n          <Link to=\"/admin/dashboard\" className=\"admin-nav-logo\">\r\n            <span className=\"logo-text\">EuroGranite</span>\r\n            <span className=\"admin-badge\">Адмін</span>\r\n          </Link>\r\n        </div>\r\n\r\n\r\n        {/* Дії користувача */}\r\n        <div className=\"admin-nav-actions\">\r\n          {/* Кнопка переходу на сайт */}\r\n          <a\r\n            href={config.siteLink}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            className=\"admin-nav-btn admin-nav-btn--site\"\r\n            title={config.siteLinkText}\r\n          >\r\n            <span className=\"btn-icon\">🌐</span>\r\n            <span className=\"btn-text\">Сайт</span>\r\n          </a>\r\n\r\n          {/* Кнопка повернення на головну адмінпанелі */}\r\n          {!location.pathname.includes('/admin/dashboard') && (\r\n            <Link\r\n              to=\"/admin/dashboard\"\r\n              className=\"admin-nav-btn admin-nav-btn--home\"\r\n              title=\"Повернутися на головну адмінпанелі\"\r\n            >\r\n              <span className=\"btn-icon\">🏠</span>\r\n              <span className=\"btn-text\">Головна</span>\r\n            </Link>\r\n          )}\r\n\r\n          {/* Кнопка виходу */}\r\n          <button\r\n            onClick={handleLogout}\r\n            className=\"admin-nav-btn admin-nav-btn--logout\"\r\n            title=\"Вийти з адмінпанелі\"\r\n          >\r\n            <span className=\"btn-icon\">🚪</span>\r\n            <span className=\"btn-text\">Вихід</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Хлібні крошки для навігації */}\r\n      <div className=\"admin-breadcrumbs\">\r\n        <div className=\"breadcrumbs-container\">\r\n          {location.pathname === '/admin/dashboard' ? (\r\n            <span className=\"breadcrumb-current\">Головна</span>\r\n          ) : (\r\n            <>\r\n              <Link to=\"/admin/dashboard\" className=\"breadcrumb-item\">\r\n                Головна\r\n              </Link>\r\n              <span className=\"breadcrumb-separator\">›</span>\r\n              <span className=\"breadcrumb-current\">{config.title}</span>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AdminNavigation","import { create } from 'zustand'\r\nimport { subscribeWithSelector } from 'zustand/middleware'\r\n\r\nconst useAdminGalleryStore = create(\r\n  subscribeWithSelector((set, get) => ({\r\n    // State\r\n    galleryImages: [],\r\n    categories: [\r\n      { id: 'courtyard', name: { ua: 'Внутрішні дворики', en: 'Courtyards', de: 'Innenhöfe', pl: 'Dziedzińce' } },\r\n      { id: 'walkway', name: { ua: 'Пішохідні доріжки', en: 'Walkways', de: 'Gehwege', pl: 'Chodniki' } },\r\n      { id: 'plaza', name: { ua: 'Площі', en: 'Plazas', de: 'Plätze', pl: 'Place' } },\r\n      { id: 'driveway', name: { ua: 'Вулиці', en: 'Streets', de: 'Straßen', pl: 'Ulice' } }\r\n    ],\r\n    isLoading: false,\r\n    error: null,\r\n\r\n    // Filter and search state\r\n    currentCategory: 'all',\r\n    searchQuery: '',\r\n    sortBy: 'newest',\r\n\r\n    // Modal state\r\n    isEditModalOpen: false,\r\n    editingImage: null,\r\n    isUploadModalOpen: false,\r\n    uploadProgress: 0,\r\n\r\n    // Statistics\r\n    statistics: {\r\n      totalImages: 0,\r\n      imagesByCategory: {},\r\n      recentUploads: 0\r\n    },\r\n\r\n    // Actions\r\n    loadGalleryImages: async () => {\r\n      set({ isLoading: true, error: null })\r\n\r\n      try {\r\n        // Simulate API call - in real app this would fetch from backend\r\n        // For now, we'll simulate with the existing gallery data\r\n        const { galleryProjects } = await import('../constants/galleryData')\r\n\r\n        // Transform the static data to match our admin structure\r\n        const transformedImages = galleryProjects.map(project => ({\r\n          id: project.id,\r\n          publicId: project.publicId,\r\n          category: project.category,\r\n          width: project.width,\r\n          height: project.height,\r\n          tags: project.tags,\r\n          alt: project.alt,\r\n          createdAt: new Date(`2024-${Math.floor(Math.random() * 12) + 1}-${Math.floor(Math.random() * 28) + 1}`).toISOString(),\r\n          updatedAt: new Date().toISOString()\r\n        }))\r\n\r\n        // Calculate statistics\r\n        const stats = get().calculateStatistics(transformedImages)\r\n\r\n        set({\r\n          galleryImages: transformedImages,\r\n          statistics: stats,\r\n          isLoading: false\r\n        })\r\n\r\n        return { success: true }\r\n      } catch (error) {\r\n        set({ error: error.message, isLoading: false })\r\n        return { success: false, error: error.message }\r\n      }\r\n    },\r\n\r\n    addGalleryImage: async (imageData) => {\r\n      set({ isLoading: true, error: null })\r\n\r\n      try {\r\n        // Generate unique ID\r\n        const newId = `image-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\r\n\r\n        const newImage = {\r\n          id: newId,\r\n          publicId: imageData.publicId,\r\n          category: imageData.category,\r\n          width: imageData.width || 1920,\r\n          height: imageData.height || 1280,\r\n          tags: ['gallery', imageData.category, ...(imageData.tags || [])],\r\n          alt: imageData.alt || {},\r\n          createdAt: new Date().toISOString(),\r\n          updatedAt: new Date().toISOString()\r\n        }\r\n\r\n        const currentImages = get().galleryImages\r\n        const updatedImages = [newImage, ...currentImages]\r\n        const stats = get().calculateStatistics(updatedImages)\r\n\r\n        set({\r\n          galleryImages: updatedImages,\r\n          statistics: stats,\r\n          isLoading: false\r\n        })\r\n\r\n        return { success: true, image: newImage }\r\n      } catch (error) {\r\n        set({ error: error.message, isLoading: false })\r\n        return { success: false, error: error.message }\r\n      }\r\n    },\r\n\r\n    updateGalleryImage: async (imageId, updates) => {\r\n      set({ isLoading: true, error: null })\r\n\r\n      try {\r\n        const currentImages = get().galleryImages\r\n        const updatedImages = currentImages.map(image =>\r\n          image.id === imageId\r\n            ? {\r\n                ...image,\r\n                ...updates,\r\n                updatedAt: new Date().toISOString()\r\n              }\r\n            : image\r\n        )\r\n\r\n        const stats = get().calculateStatistics(updatedImages)\r\n\r\n        set({\r\n          galleryImages: updatedImages,\r\n          statistics: stats,\r\n          isLoading: false\r\n        })\r\n\r\n        return { success: true }\r\n      } catch (error) {\r\n        set({ error: error.message, isLoading: false })\r\n        return { success: false, error: error.message }\r\n      }\r\n    },\r\n\r\n    deleteGalleryImage: async (imageId) => {\r\n      set({ isLoading: true, error: null })\r\n\r\n      try {\r\n        const currentImages = get().galleryImages\r\n        const updatedImages = currentImages.filter(image => image.id !== imageId)\r\n        const stats = get().calculateStatistics(updatedImages)\r\n\r\n        set({\r\n          galleryImages: updatedImages,\r\n          statistics: stats,\r\n          isLoading: false\r\n        })\r\n\r\n        return { success: true }\r\n      } catch (error) {\r\n        set({ error: error.message, isLoading: false })\r\n        return { success: false, error: error.message }\r\n      }\r\n    },\r\n\r\n    // Bulk operations\r\n    deleteMultipleImages: async (imageIds) => {\r\n      set({ isLoading: true, error: null })\r\n\r\n      try {\r\n        const currentImages = get().galleryImages\r\n        const updatedImages = currentImages.filter(image => !imageIds.includes(image.id))\r\n        const stats = get().calculateStatistics(updatedImages)\r\n\r\n        set({\r\n          galleryImages: updatedImages,\r\n          statistics: stats,\r\n          isLoading: false\r\n        })\r\n\r\n        return { success: true, deletedCount: imageIds.length }\r\n      } catch (error) {\r\n        set({ error: error.message, isLoading: false })\r\n        return { success: false, error: error.message }\r\n      }\r\n    },\r\n\r\n    updateCategory: async (imageIds, newCategory) => {\r\n      set({ isLoading: true, error: null })\r\n\r\n      try {\r\n        const currentImages = get().galleryImages\r\n        const updatedImages = currentImages.map(image =>\r\n          imageIds.includes(image.id)\r\n            ? {\r\n                ...image,\r\n                category: newCategory,\r\n                tags: image.tags.filter(tag => !get().categories.some(cat => cat.id === tag))\r\n                  .concat([newCategory]),\r\n                updatedAt: new Date().toISOString()\r\n              }\r\n            : image\r\n        )\r\n\r\n        const stats = get().calculateStatistics(updatedImages)\r\n\r\n        set({\r\n          galleryImages: updatedImages,\r\n          statistics: stats,\r\n          isLoading: false\r\n        })\r\n\r\n        return { success: true, updatedCount: imageIds.length }\r\n      } catch (error) {\r\n        set({ error: error.message, isLoading: false })\r\n        return { success: false, error: error.message }\r\n      }\r\n    },\r\n\r\n    // Filtering and search\r\n    setCurrentCategory: (category) => {\r\n      set({ currentCategory: category })\r\n    },\r\n\r\n    setSearchQuery: (query) => {\r\n      set({ searchQuery: query })\r\n    },\r\n\r\n    setSortBy: (sortBy) => {\r\n      set({ sortBy })\r\n    },\r\n\r\n    getFilteredImages: () => {\r\n      const { galleryImages, currentCategory, searchQuery, sortBy } = get()\r\n\r\n      let filtered = [...galleryImages]\r\n\r\n      // Filter by category\r\n      if (currentCategory !== 'all') {\r\n        filtered = filtered.filter(image => image.category === currentCategory)\r\n      }\r\n\r\n      // Filter by search query\r\n      if (searchQuery.trim()) {\r\n        const query = searchQuery.toLowerCase()\r\n        filtered = filtered.filter(image =>\r\n          image.id.toLowerCase().includes(query) ||\r\n          image.category.toLowerCase().includes(query) ||\r\n          image.tags.some(tag => tag.toLowerCase().includes(query)) ||\r\n          Object.values(image.alt || {}).some(text =>\r\n            text.toLowerCase().includes(query)\r\n          )\r\n        )\r\n      }\r\n\r\n      // Sort results\r\n      switch (sortBy) {\r\n        case 'newest':\r\n          filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))\r\n          break\r\n        case 'oldest':\r\n          filtered.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt))\r\n          break\r\n        case 'category':\r\n          filtered.sort((a, b) => a.category.localeCompare(b.category))\r\n          break\r\n        case 'id':\r\n          filtered.sort((a, b) => a.id.localeCompare(b.id))\r\n          break\r\n        default:\r\n          break\r\n      }\r\n\r\n      return filtered\r\n    },\r\n\r\n    // Modal actions\r\n    openEditModal: (image = null) => {\r\n      set({\r\n        isEditModalOpen: true,\r\n        editingImage: image\r\n      })\r\n    },\r\n\r\n    closeEditModal: () => {\r\n      set({\r\n        isEditModalOpen: false,\r\n        editingImage: null\r\n      })\r\n    },\r\n\r\n    openUploadModal: () => {\r\n      set({ isUploadModalOpen: true })\r\n    },\r\n\r\n    closeUploadModal: () => {\r\n      set({ isUploadModalOpen: false, uploadProgress: 0 })\r\n    },\r\n\r\n    setUploadProgress: (progress) => {\r\n      set({ uploadProgress: progress })\r\n    },\r\n\r\n    // Statistics calculation\r\n    calculateStatistics: (images) => {\r\n      const imagesByCategory = images.reduce((acc, image) => {\r\n        acc[image.category] = (acc[image.category] || 0) + 1\r\n        return acc\r\n      }, {})\r\n\r\n      const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)\r\n      const recentUploads = images.filter(image =>\r\n        new Date(image.createdAt) > thirtyDaysAgo\r\n      ).length\r\n\r\n      return {\r\n        totalImages: images.length,\r\n        imagesByCategory,\r\n        recentUploads\r\n      }\r\n    },\r\n\r\n    // Export functionality\r\n    exportGalleryData: () => {\r\n      const { galleryImages } = get()\r\n      const dataStr = JSON.stringify(galleryImages, null, 2)\r\n      const dataBlob = new Blob([dataStr], { type: 'application/json' })\r\n\r\n      const url = URL.createObjectURL(dataBlob)\r\n      const link = document.createElement('a')\r\n      link.href = url\r\n      link.download = `gallery-export-${new Date().toISOString().split('T')[0]}.json`\r\n      document.body.appendChild(link)\r\n      link.click()\r\n      document.body.removeChild(link)\r\n      URL.revokeObjectURL(url)\r\n    },\r\n\r\n    // Clear all data\r\n    clearError: () => {\r\n      set({ error: null })\r\n    }\r\n  }))\r\n)\r\n\r\nexport default useAdminGalleryStore","import React, { useState, useEffect } from 'react'\r\nimport useAdminGalleryStore from '../../../stores/adminGalleryStore'\r\nimport CloudinaryImage from '../../atoms/CloudinaryImage/CloudinaryImage'\r\n\r\nconst GalleryImagesList = () => {\r\n  const {\r\n    galleryImages,\r\n    getFilteredImages,\r\n    currentCategory,\r\n    searchQuery,\r\n    sortBy,\r\n    isLoading,\r\n    statistics,\r\n    loadGalleryImages,\r\n    deleteGalleryImage,\r\n    deleteMultipleImages,\r\n    updateCategory,\r\n    setCurrentCategory,\r\n    setSearchQuery,\r\n    setSortBy,\r\n    openEditModal,\r\n    openUploadModal,\r\n    exportGalleryData,\r\n    categories\r\n  } = useAdminGalleryStore()\r\n\r\n  const [selectedImages, setSelectedImages] = useState(new Set())\r\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(null)\r\n  const [bulkAction, setBulkAction] = useState('')\r\n\r\n  // Load images on mount\r\n  useEffect(() => {\r\n    loadGalleryImages()\r\n  }, [loadGalleryImages])\r\n\r\n  const filteredImages = getFilteredImages()\r\n\r\n  const handleSelectImage = (imageId) => {\r\n    const newSelected = new Set(selectedImages)\r\n    if (newSelected.has(imageId)) {\r\n      newSelected.delete(imageId)\r\n    } else {\r\n      newSelected.add(imageId)\r\n    }\r\n    setSelectedImages(newSelected)\r\n  }\r\n\r\n  const handleSelectAll = () => {\r\n    if (selectedImages.size === filteredImages.length) {\r\n      setSelectedImages(new Set())\r\n    } else {\r\n      setSelectedImages(new Set(filteredImages.map(img => img.id)))\r\n    }\r\n  }\r\n\r\n  const handleDeleteImage = async (imageId) => {\r\n    const result = await deleteGalleryImage(imageId)\r\n    if (result.success) {\r\n      setShowDeleteConfirm(null)\r\n      setSelectedImages(prev => {\r\n        const newSet = new Set(prev)\r\n        newSet.delete(imageId)\r\n        return newSet\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleBulkAction = async () => {\r\n    const selectedIds = Array.from(selectedImages)\r\n\r\n    if (bulkAction === 'delete') {\r\n      const result = await deleteMultipleImages(selectedIds)\r\n      if (result.success) {\r\n        setSelectedImages(new Set())\r\n        setBulkAction('')\r\n      }\r\n    } else if (bulkAction.startsWith('category-')) {\r\n      const newCategory = bulkAction.replace('category-', '')\r\n      const result = await updateCategory(selectedIds, newCategory)\r\n      if (result.success) {\r\n        setSelectedImages(new Set())\r\n        setBulkAction('')\r\n      }\r\n    }\r\n  }\r\n\r\n  const formatDate = (dateString) => {\r\n    return new Date(dateString).toLocaleDateString('uk-UA', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    })\r\n  }\r\n\r\n  const getCategoryName = (categoryId) => {\r\n    const category = categories.find(cat => cat.id === categoryId)\r\n    return category ? category.name.ua : categoryId\r\n  }\r\n\r\n  if (isLoading && galleryImages.length === 0) {\r\n    return (\r\n      <div className=\"gallery-loading\">\r\n        <div className=\"loading-spinner\"></div>\r\n        <p>Завантаження галереї...</p>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"gallery-images-list\">\r\n      {/* Header with statistics */}\r\n      <div className=\"gallery-header\">\r\n        <div className=\"gallery-stats\">\r\n          <div className=\"stat-card\">\r\n            <h3>{statistics.totalImages}</h3>\r\n            <p>Всього зображень</p>\r\n          </div>\r\n          <div className=\"stat-card\">\r\n            <h3>{statistics.recentUploads}</h3>\r\n            <p>Нових за місяць</p>\r\n          </div>\r\n          <div className=\"stat-card\">\r\n            <h3>{Object.keys(statistics.imagesByCategory).length}</h3>\r\n            <p>Категорій</p>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"gallery-actions\">\r\n          <button\r\n            onClick={openUploadModal}\r\n            className=\"btn btn-primary\"\r\n          >\r\n            ➕ Додати зображення\r\n          </button>\r\n          <button\r\n            onClick={exportGalleryData}\r\n            className=\"btn btn-secondary\"\r\n          >\r\n            📥 Експорт\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Filters and search */}\r\n      <div className=\"gallery-filters\">\r\n        <div className=\"filter-row\">\r\n          <div className=\"search-box\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Пошук зображень...\"\r\n              value={searchQuery}\r\n              onChange={(e) => setSearchQuery(e.target.value)}\r\n              className=\"search-input\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"filter-controls\">\r\n            <select\r\n              value={currentCategory}\r\n              onChange={(e) => setCurrentCategory(e.target.value)}\r\n              className=\"filter-select\"\r\n            >\r\n              <option value=\"all\">Всі категорії</option>\r\n              {categories.map(category => (\r\n                <option key={category.id} value={category.id}>\r\n                  {category.name.ua}\r\n                </option>\r\n              ))}\r\n            </select>\r\n\r\n            <select\r\n              value={sortBy}\r\n              onChange={(e) => setSortBy(e.target.value)}\r\n              className=\"filter-select\"\r\n            >\r\n              <option value=\"newest\">Найновіші</option>\r\n              <option value=\"oldest\">Найстаріші</option>\r\n              <option value=\"category\">За категорією</option>\r\n              <option value=\"id\">За ID</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Bulk actions */}\r\n        {selectedImages.size > 0 && (\r\n          <div className=\"bulk-actions\">\r\n            <span className=\"selected-count\">\r\n              Вибрано: {selectedImages.size}\r\n            </span>\r\n\r\n            <div className=\"bulk-controls\">\r\n              <select\r\n                value={bulkAction}\r\n                onChange={(e) => setBulkAction(e.target.value)}\r\n                className=\"bulk-select\"\r\n              >\r\n                <option value=\"\">Дії з вибраними</option>\r\n                <option value=\"delete\">Видалити</option>\r\n                <optgroup label=\"Змінити категорію\">\r\n                  {categories.map(category => (\r\n                    <option key={`category-${category.id}`} value={`category-${category.id}`}>\r\n                      {category.name.ua}\r\n                    </option>\r\n                  ))}\r\n                </optgroup>\r\n              </select>\r\n\r\n              {bulkAction && (\r\n                <button\r\n                  onClick={handleBulkAction}\r\n                  className=\"btn btn-primary btn-sm\"\r\n                >\r\n                  Застосувати\r\n                </button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Results info */}\r\n      <div className=\"results-info\">\r\n        <span>Знайдено: {filteredImages.length} зображень</span>\r\n        <label className=\"select-all-label\">\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={selectedImages.size === filteredImages.length && filteredImages.length > 0}\r\n            onChange={handleSelectAll}\r\n          />\r\n          Вибрати всі\r\n        </label>\r\n      </div>\r\n\r\n      {/* Images grid */}\r\n      <div className=\"gallery-grid\">\r\n        {filteredImages.map(image => (\r\n          <div\r\n            key={image.id}\r\n            className={`gallery-item ${selectedImages.has(image.id) ? 'selected' : ''}`}\r\n          >\r\n            <div className=\"image-container\">\r\n              <input\r\n                type=\"checkbox\"\r\n                className=\"image-checkbox\"\r\n                checked={selectedImages.has(image.id)}\r\n                onChange={() => handleSelectImage(image.id)}\r\n              />\r\n\r\n              <CloudinaryImage\r\n                publicId={image.publicId}\r\n                alt={image.alt?.ua || image.alt?.en || `Gallery image ${image.id}`}\r\n                width={300}\r\n                height={200}\r\n                className=\"gallery-thumbnail\"\r\n              />\r\n\r\n              <div className=\"image-overlay\">\r\n                <div className=\"image-actions\">\r\n                  <button\r\n                    onClick={() => openEditModal(image)}\r\n                    className=\"action-btn edit-btn\"\r\n                    title=\"Редагувати\"\r\n                  >\r\n                    ✏️\r\n                  </button>\r\n                  <button\r\n                    onClick={() => setShowDeleteConfirm(image.id)}\r\n                    className=\"action-btn delete-btn\"\r\n                    title=\"Видалити\"\r\n                  >\r\n                    🗑️\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"image-info\">\r\n              <div className=\"image-id\">{image.id}</div>\r\n              <div className=\"image-category\">\r\n                <span className={`category-tag category-${image.category}`}>\r\n                  {getCategoryName(image.category)}\r\n                </span>\r\n              </div>\r\n              <div className=\"image-meta\">\r\n                <span className=\"image-dimensions\">\r\n                  {image.width} × {image.height}\r\n                </span>\r\n                <span className=\"image-date\">\r\n                  {formatDate(image.createdAt)}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n\r\n        {filteredImages.length === 0 && !isLoading && (\r\n          <div className=\"no-results\">\r\n            <p>Зображення не знайдено</p>\r\n            {searchQuery && (\r\n              <button\r\n                onClick={() => setSearchQuery('')}\r\n                className=\"btn btn-secondary\"\r\n              >\r\n                Очистити пошук\r\n              </button>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Delete confirmation modal */}\r\n      {showDeleteConfirm && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal\">\r\n            <h3>Підтвердження видалення</h3>\r\n            <p>Ви впевнені, що хочете видалити це зображення?</p>\r\n            <div className=\"modal-actions\">\r\n              <button\r\n                onClick={() => setShowDeleteConfirm(null)}\r\n                className=\"btn btn-secondary\"\r\n              >\r\n                Скасувати\r\n              </button>\r\n              <button\r\n                onClick={() => handleDeleteImage(showDeleteConfirm)}\r\n                className=\"btn btn-danger\"\r\n              >\r\n                Видалити\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GalleryImagesList","import React, { useState, useEffect } from 'react'\r\nimport useAdminGalleryStore from '../../../stores/adminGalleryStore'\r\nimport CloudinaryImage from '../../atoms/CloudinaryImage/CloudinaryImage'\r\n\r\nconst GalleryImageEditor = () => {\r\n  const {\r\n    editingImage,\r\n    isEditModalOpen,\r\n    closeEditModal,\r\n    addGalleryImage,\r\n    updateGalleryImage,\r\n    isLoading,\r\n    error,\r\n    categories\r\n  } = useAdminGalleryStore()\r\n\r\n  const [formData, setFormData] = useState({\r\n    publicId: '',\r\n    category: 'courtyard',\r\n    width: 1920,\r\n    height: 1280,\r\n    tags: [],\r\n    alt: {\r\n      ua: '',\r\n      en: '',\r\n      de: '',\r\n      pl: ''\r\n    }\r\n  })\r\n\r\n  const [newTag, setNewTag] = useState('')\r\n  const [imagePreview, setImagePreview] = useState(null)\r\n\r\n  // Fill form when editing\r\n  useEffect(() => {\r\n    if (editingImage) {\r\n      setFormData({\r\n        publicId: editingImage.publicId || '',\r\n        category: editingImage.category || 'courtyard',\r\n        width: editingImage.width || 1920,\r\n        height: editingImage.height || 1280,\r\n        tags: editingImage.tags?.filter(tag => !categories.some(cat => cat.id === tag)) || [],\r\n        alt: editingImage.alt || { ua: '', en: '', de: '', pl: '' }\r\n      })\r\n      setImagePreview(editingImage.publicId)\r\n    } else {\r\n      // Reset form for new image\r\n      setFormData({\r\n        publicId: '',\r\n        category: 'courtyard',\r\n        width: 1920,\r\n        height: 1280,\r\n        tags: [],\r\n        alt: { ua: '', en: '', de: '', pl: '' }\r\n      })\r\n      setImagePreview(null)\r\n    }\r\n  }, [editingImage, categories])\r\n\r\n  const handleInputChange = (field, value, lang = null) => {\r\n    if (lang) {\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        [field]: {\r\n          ...prev[field],\r\n          [lang]: value\r\n        }\r\n      }))\r\n    } else {\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        [field]: value\r\n      }))\r\n    }\r\n  }\r\n\r\n  const handlePublicIdChange = (value) => {\r\n    setFormData(prev => ({ ...prev, publicId: value }))\r\n    setImagePreview(value)\r\n  }\r\n\r\n  const addTag = () => {\r\n    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        tags: [...prev.tags, newTag.trim()]\r\n      }))\r\n      setNewTag('')\r\n    }\r\n  }\r\n\r\n  const removeTag = (tagToRemove) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      tags: prev.tags.filter(tag => tag !== tagToRemove)\r\n    }))\r\n  }\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault()\r\n\r\n    // Validation\r\n    if (!formData.publicId.trim()) {\r\n      alert('Будь ласка, введіть Public ID зображення')\r\n      return\r\n    }\r\n\r\n    if (!formData.alt.ua.trim()) {\r\n      alert('Будь ласка, введіть опис зображення українською')\r\n      return\r\n    }\r\n\r\n    try {\r\n      let result\r\n      if (editingImage) {\r\n        result = await updateGalleryImage(editingImage.id, formData)\r\n      } else {\r\n        result = await addGalleryImage(formData)\r\n      }\r\n\r\n      if (result.success) {\r\n        closeEditModal()\r\n      } else {\r\n        alert(`Помилка: ${result.error}`)\r\n      }\r\n    } catch (error) {\r\n      alert(`Помилка: ${error.message}`)\r\n    }\r\n  }\r\n\r\n  const extractPublicIdFromUrl = (url) => {\r\n    try {\r\n      // Extract public ID from Cloudinary URL\r\n      const match = url.match(/\\/image\\/upload\\/(?:v\\d+\\/)?(.+?)(?:\\.[^.]+)?$/)\r\n      if (match) {\r\n        return match[1].split('/').pop()\r\n      }\r\n      return url\r\n    } catch {\r\n      return url\r\n    }\r\n  }\r\n\r\n  const handleUrlPaste = (e) => {\r\n    const pastedUrl = e.target.value\r\n    const extractedId = extractPublicIdFromUrl(pastedUrl)\r\n    handlePublicIdChange(extractedId)\r\n  }\r\n\r\n  if (!isEditModalOpen) return null\r\n\r\n  return (\r\n    <div className=\"gallery-editor-overlay\">\r\n      <div className=\"gallery-editor-modal\">\r\n        <div className=\"modal-header\">\r\n          <h2>\r\n            {editingImage ? 'Редагувати зображення' : 'Додати нове зображення'}\r\n          </h2>\r\n          <button\r\n            onClick={closeEditModal}\r\n            className=\"close-btn\"\r\n            disabled={isLoading}\r\n          >\r\n            ✕\r\n          </button>\r\n        </div>\r\n\r\n        <form onSubmit={handleSubmit} className=\"gallery-form\">\r\n          <div className=\"form-sections\">\r\n            {/* Image Preview */}\r\n            {imagePreview && (\r\n              <div className=\"form-section\">\r\n                <h3>Попередній перегляд</h3>\r\n                <div className=\"image-preview\">\r\n                  <CloudinaryImage\r\n                    publicId={imagePreview}\r\n                    alt=\"Preview\"\r\n                    width={400}\r\n                    height={267}\r\n                    className=\"preview-image\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Basic Information */}\r\n            <div className=\"form-section\">\r\n              <h3>Основна інформація</h3>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Cloudinary Public ID *</label>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"image-name_abc123 або вставте повний URL\"\r\n                  value={formData.publicId}\r\n                  onChange={(e) => handleUrlPaste(e)}\r\n                  required\r\n                />\r\n                <small className=\"form-help\">\r\n                  Введіть Public ID з Cloudinary або вставте повний URL зображення\r\n                </small>\r\n              </div>\r\n\r\n              <div className=\"form-row\">\r\n                <div className=\"form-group\">\r\n                  <label>Категорія</label>\r\n                  <select\r\n                    value={formData.category}\r\n                    onChange={(e) => handleInputChange('category', e.target.value)}\r\n                  >\r\n                    {categories.map(category => (\r\n                      <option key={category.id} value={category.id}>\r\n                        {category.name.ua}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>Ширина (px)</label>\r\n                  <input\r\n                    type=\"number\"\r\n                    value={formData.width}\r\n                    onChange={(e) => handleInputChange('width', parseInt(e.target.value) || 1920)}\r\n                    min=\"1\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>Висота (px)</label>\r\n                  <input\r\n                    type=\"number\"\r\n                    value={formData.height}\r\n                    onChange={(e) => handleInputChange('height', parseInt(e.target.value) || 1280)}\r\n                    min=\"1\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Alt Text */}\r\n            <div className=\"form-section\">\r\n              <h3>Опис зображення (Alt text)</h3>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Українська *</label>\r\n                <textarea\r\n                  placeholder=\"Опис зображення українською мовою\"\r\n                  value={formData.alt.ua}\r\n                  onChange={(e) => handleInputChange('alt', e.target.value, 'ua')}\r\n                  required\r\n                  rows=\"3\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>English</label>\r\n                <textarea\r\n                  placeholder=\"Image description in English\"\r\n                  value={formData.alt.en}\r\n                  onChange={(e) => handleInputChange('alt', e.target.value, 'en')}\r\n                  rows=\"3\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-row\">\r\n                <div className=\"form-group\">\r\n                  <label>Deutsch</label>\r\n                  <textarea\r\n                    placeholder=\"Bildbeschreibung auf Deutsch\"\r\n                    value={formData.alt.de}\r\n                    onChange={(e) => handleInputChange('alt', e.target.value, 'de')}\r\n                    rows=\"2\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>Polski</label>\r\n                  <textarea\r\n                    placeholder=\"Opis obrazu po polsku\"\r\n                    value={formData.alt.pl}\r\n                    onChange={(e) => handleInputChange('alt', e.target.value, 'pl')}\r\n                    rows=\"2\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Tags */}\r\n            <div className=\"form-section\">\r\n              <h3>Додаткові теги</h3>\r\n\r\n              <div className=\"tags-list\">\r\n                {formData.tags.map((tag, index) => (\r\n                  <div key={index} className=\"tag-item\">\r\n                    <span>{tag}</span>\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={() => removeTag(tag)}\r\n                      className=\"remove-tag-btn\"\r\n                    >\r\n                      ✕\r\n                    </button>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n\r\n              <div className=\"add-tag\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Новий тег\"\r\n                  value={newTag}\r\n                  onChange={(e) => setNewTag(e.target.value)}\r\n                  onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addTag())}\r\n                />\r\n                <button type=\"button\" onClick={addTag} className=\"add-tag-btn\">\r\n                  ➕ Додати тег\r\n                </button>\r\n              </div>\r\n\r\n              <small className=\"form-help\">\r\n                Теги галерея та категорія додаються автоматично\r\n              </small>\r\n            </div>\r\n          </div>\r\n\r\n          {error && (\r\n            <div className=\"form-error\">\r\n              ❌ {error}\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"form-actions\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={closeEditModal}\r\n              className=\"btn btn-secondary\"\r\n              disabled={isLoading}\r\n            >\r\n              Скасувати\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn btn-primary\"\r\n              disabled={isLoading}\r\n            >\r\n              {isLoading ? 'Збереження...' : editingImage ? 'Оновити' : 'Додати'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GalleryImageEditor","import React, { useState, useRef } from 'react'\r\nimport useAdminGalleryStore from '../../../stores/adminGalleryStore'\r\n\r\nconst GalleryUploadModal = () => {\r\n  const {\r\n    isUploadModalOpen,\r\n    closeUploadModal,\r\n    addGalleryImage,\r\n    categories,\r\n    uploadProgress,\r\n    setUploadProgress\r\n  } = useAdminGalleryStore()\r\n\r\n  const [dragActive, setDragActive] = useState(false)\r\n  const [uploadQueue, setUploadQueue] = useState([])\r\n  const [isUploading, setIsUploading] = useState(false)\r\n  const fileInputRef = useRef(null)\r\n\r\n  const [defaultSettings, setDefaultSettings] = useState({\r\n    category: 'courtyard',\r\n    generateAlt: true,\r\n    autoTags: true\r\n  })\r\n\r\n  const handleDrag = (e) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    if (e.type === 'dragenter' || e.type === 'dragover') {\r\n      setDragActive(true)\r\n    } else if (e.type === 'dragleave') {\r\n      setDragActive(false)\r\n    }\r\n  }\r\n\r\n  const handleDrop = (e) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    setDragActive(false)\r\n\r\n    const files = Array.from(e.dataTransfer.files)\r\n    handleFiles(files)\r\n  }\r\n\r\n  const handleFileInput = (e) => {\r\n    const files = Array.from(e.target.files)\r\n    handleFiles(files)\r\n  }\r\n\r\n  const handleFiles = (files) => {\r\n    const imageFiles = files.filter(file => file.type.startsWith('image/'))\r\n\r\n    if (imageFiles.length === 0) {\r\n      alert('Будь ласка, виберіть файли зображень')\r\n      return\r\n    }\r\n\r\n    const newQueue = imageFiles.map(file => ({\r\n      id: Date.now() + Math.random(),\r\n      file,\r\n      name: file.name,\r\n      size: file.size,\r\n      preview: URL.createObjectURL(file),\r\n      status: 'pending', // pending, uploading, completed, error\r\n      progress: 0,\r\n      publicId: '',\r\n      error: null\r\n    }))\r\n\r\n    setUploadQueue(prev => [...prev, ...newQueue])\r\n  }\r\n\r\n  const removeFromQueue = (itemId) => {\r\n    setUploadQueue(prev => {\r\n      const updated = prev.filter(item => item.id !== itemId)\r\n      // Clean up object URL\r\n      const item = prev.find(item => item.id === itemId)\r\n      if (item?.preview) {\r\n        URL.revokeObjectURL(item.preview)\r\n      }\r\n      return updated\r\n    })\r\n  }\r\n\r\n  const generateAltText = (filename, category) => {\r\n    const categoryNames = {\r\n      courtyard: {\r\n        ua: 'Проект гранітного мощення внутрішнього дворика',\r\n        en: 'Granite courtyard paving project',\r\n        de: 'Granit-Innenhof-Pflasterung',\r\n        pl: 'Projekt granitowej kostki na dziedzińcu'\r\n      },\r\n      walkway: {\r\n        ua: 'Проект гранітного мощення пішохідної доріжки',\r\n        en: 'Granite walkway paving project',\r\n        de: 'Granit-Gehweg-Pflasterung',\r\n        pl: 'Projekt granitowej kostki na chodniku'\r\n      },\r\n      plaza: {\r\n        ua: 'Проект гранітного мощення площі',\r\n        en: 'Granite plaza paving project',\r\n        de: 'Granit-Platz-Pflasterung',\r\n        pl: 'Projekt granitowej kostki na placu'\r\n      },\r\n      driveway: {\r\n        ua: 'Проект гранітного мощення вулиці',\r\n        en: 'Granite street paving project',\r\n        de: 'Granit-Straßenpflasterung',\r\n        pl: 'Projekt granitowej kostki na ulicy'\r\n      }\r\n    }\r\n\r\n    return categoryNames[category] || categoryNames.courtyard\r\n  }\r\n\r\n  const uploadToCloudinary = async (file) => {\r\n    const formData = new FormData()\r\n    formData.append('file', file)\r\n    formData.append('upload_preset', process.env.REACT_APP_CLOUDINARY_UPLOAD_PRESET || 'eurogranite_upload')\r\n    formData.append('folder', `dsunqfo3g/${defaultSettings.category}`)\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `https://api.cloudinary.com/v1_1/${process.env.REACT_APP_CLOUDINARY_CLOUD_NAME || 'dsunqfo3g'}/image/upload`,\r\n        {\r\n          method: 'POST',\r\n          body: formData\r\n        }\r\n      )\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Upload failed: ${response.statusText}`)\r\n      }\r\n\r\n      const result = await response.json()\r\n      return {\r\n        success: true,\r\n        publicId: result.public_id,\r\n        width: result.width,\r\n        height: result.height,\r\n        url: result.secure_url\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message\r\n      }\r\n    }\r\n  }\r\n\r\n  const startUpload = async () => {\r\n    if (uploadQueue.length === 0) return\r\n\r\n    setIsUploading(true)\r\n    setUploadProgress(0)\r\n\r\n    const pendingItems = uploadQueue.filter(item => item.status === 'pending')\r\n    let completedCount = 0\r\n\r\n    for (const item of pendingItems) {\r\n      // Update item status to uploading\r\n      setUploadQueue(prev => prev.map(i =>\r\n        i.id === item.id ? { ...i, status: 'uploading', progress: 0 } : i\r\n      ))\r\n\r\n      try {\r\n        // Upload to Cloudinary\r\n        const uploadResult = await uploadToCloudinary(item.file)\r\n\r\n        if (uploadResult.success) {\r\n          // Create gallery image data\r\n          const imageData = {\r\n            publicId: uploadResult.publicId,\r\n            category: defaultSettings.category,\r\n            width: uploadResult.width,\r\n            height: uploadResult.height,\r\n            tags: defaultSettings.autoTags ? ['gallery', defaultSettings.category] : ['gallery'],\r\n            alt: defaultSettings.generateAlt ? generateAltText(item.name, defaultSettings.category) : {\r\n              ua: '',\r\n              en: '',\r\n              de: '',\r\n              pl: ''\r\n            }\r\n          }\r\n\r\n          // Add to gallery store\r\n          const result = await addGalleryImage(imageData)\r\n\r\n          if (result.success) {\r\n            setUploadQueue(prev => prev.map(i =>\r\n              i.id === item.id ? {\r\n                ...i,\r\n                status: 'completed',\r\n                progress: 100,\r\n                publicId: uploadResult.publicId\r\n              } : i\r\n            ))\r\n          } else {\r\n            throw new Error(result.error)\r\n          }\r\n        } else {\r\n          throw new Error(uploadResult.error)\r\n        }\r\n      } catch (error) {\r\n        setUploadQueue(prev => prev.map(i =>\r\n          i.id === item.id ? {\r\n            ...i,\r\n            status: 'error',\r\n            error: error.message\r\n          } : i\r\n        ))\r\n      }\r\n\r\n      completedCount++\r\n      setUploadProgress((completedCount / pendingItems.length) * 100)\r\n    }\r\n\r\n    setIsUploading(false)\r\n  }\r\n\r\n  const clearCompleted = () => {\r\n    setUploadQueue(prev => {\r\n      const completed = prev.filter(item => item.status === 'completed')\r\n      completed.forEach(item => {\r\n        if (item.preview) {\r\n          URL.revokeObjectURL(item.preview)\r\n        }\r\n      })\r\n      return prev.filter(item => item.status !== 'completed')\r\n    })\r\n  }\r\n\r\n  const clearAll = () => {\r\n    uploadQueue.forEach(item => {\r\n      if (item.preview) {\r\n        URL.revokeObjectURL(item.preview)\r\n      }\r\n    })\r\n    setUploadQueue([])\r\n    setUploadProgress(0)\r\n  }\r\n\r\n  const formatFileSize = (bytes) => {\r\n    if (bytes === 0) return '0 Bytes'\r\n    const k = 1024\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB']\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k))\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]\r\n  }\r\n\r\n  if (!isUploadModalOpen) return null\r\n\r\n  return (\r\n    <div className=\"upload-modal-overlay\">\r\n      <div className=\"upload-modal\">\r\n        <div className=\"modal-header\">\r\n          <h2>Завантаження зображень</h2>\r\n          <button\r\n            onClick={closeUploadModal}\r\n            className=\"close-btn\"\r\n            disabled={isUploading}\r\n          >\r\n            ✕\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"upload-content\">\r\n          {/* Upload Settings */}\r\n          <div className=\"upload-settings\">\r\n            <h3>Налаштування завантаження</h3>\r\n            <div className=\"settings-grid\">\r\n              <div className=\"form-group\">\r\n                <label>Категорія за замовчуванням</label>\r\n                <select\r\n                  value={defaultSettings.category}\r\n                  onChange={(e) => setDefaultSettings(prev => ({\r\n                    ...prev,\r\n                    category: e.target.value\r\n                  }))}\r\n                  disabled={isUploading}\r\n                >\r\n                  {categories.map(category => (\r\n                    <option key={category.id} value={category.id}>\r\n                      {category.name.ua}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n\r\n              <div className=\"settings-checkboxes\">\r\n                <label className=\"checkbox-label\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={defaultSettings.generateAlt}\r\n                    onChange={(e) => setDefaultSettings(prev => ({\r\n                      ...prev,\r\n                      generateAlt: e.target.checked\r\n                    }))}\r\n                    disabled={isUploading}\r\n                  />\r\n                  Автоматично генерувати Alt текст\r\n                </label>\r\n\r\n                <label className=\"checkbox-label\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={defaultSettings.autoTags}\r\n                    onChange={(e) => setDefaultSettings(prev => ({\r\n                      ...prev,\r\n                      autoTags: e.target.checked\r\n                    }))}\r\n                    disabled={isUploading}\r\n                  />\r\n                  Автоматично додавати теги\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Upload Area */}\r\n          <div\r\n            className={`upload-area ${dragActive ? 'drag-active' : ''}`}\r\n            onDragEnter={handleDrag}\r\n            onDragLeave={handleDrag}\r\n            onDragOver={handleDrag}\r\n            onDrop={handleDrop}\r\n            onClick={() => fileInputRef.current?.click()}\r\n          >\r\n            <input\r\n              ref={fileInputRef}\r\n              type=\"file\"\r\n              multiple\r\n              accept=\"image/*\"\r\n              onChange={handleFileInput}\r\n              style={{ display: 'none' }}\r\n              disabled={isUploading}\r\n            />\r\n\r\n            <div className=\"upload-icon\">📁</div>\r\n            <p>Перетягніть зображення сюди або клікніть для вибору</p>\r\n            <small>Підтримуються: JPG, PNG, WebP, GIF</small>\r\n          </div>\r\n\r\n          {/* Upload Queue */}\r\n          {uploadQueue.length > 0 && (\r\n            <div className=\"upload-queue\">\r\n              <div className=\"queue-header\">\r\n                <h3>Черга завантаження ({uploadQueue.length})</h3>\r\n                <div className=\"queue-actions\">\r\n                  {!isUploading && (\r\n                    <>\r\n                      <button\r\n                        onClick={clearCompleted}\r\n                        className=\"btn btn-secondary btn-sm\"\r\n                        disabled={uploadQueue.filter(item => item.status === 'completed').length === 0}\r\n                      >\r\n                        Очистити завершені\r\n                      </button>\r\n                      <button\r\n                        onClick={clearAll}\r\n                        className=\"btn btn-secondary btn-sm\"\r\n                      >\r\n                        Очистити все\r\n                      </button>\r\n                      <button\r\n                        onClick={startUpload}\r\n                        className=\"btn btn-primary btn-sm\"\r\n                        disabled={uploadQueue.filter(item => item.status === 'pending').length === 0}\r\n                      >\r\n                        Почати завантаження\r\n                      </button>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              {isUploading && (\r\n                <div className=\"upload-progress\">\r\n                  <div className=\"progress-bar\">\r\n                    <div\r\n                      className=\"progress-fill\"\r\n                      style={{ width: `${uploadProgress}%` }}\r\n                    ></div>\r\n                  </div>\r\n                  <span>{Math.round(uploadProgress)}%</span>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"queue-list\">\r\n                {uploadQueue.map(item => (\r\n                  <div key={item.id} className={`queue-item status-${item.status}`}>\r\n                    <div className=\"item-preview\">\r\n                      <img src={item.preview} alt={item.name} />\r\n                    </div>\r\n\r\n                    <div className=\"item-info\">\r\n                      <div className=\"item-name\">{item.name}</div>\r\n                      <div className=\"item-size\">{formatFileSize(item.size)}</div>\r\n                      {item.status === 'error' && (\r\n                        <div className=\"item-error\">{item.error}</div>\r\n                      )}\r\n                      {item.status === 'completed' && (\r\n                        <div className=\"item-success\">\r\n                          Завантажено: {item.publicId}\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n\r\n                    <div className=\"item-status\">\r\n                      {item.status === 'pending' && '⏳'}\r\n                      {item.status === 'uploading' && '⏫'}\r\n                      {item.status === 'completed' && '✅'}\r\n                      {item.status === 'error' && '❌'}\r\n                    </div>\r\n\r\n                    {!isUploading && (\r\n                      <button\r\n                        onClick={() => removeFromQueue(item.id)}\r\n                        className=\"remove-item-btn\"\r\n                        title=\"Видалити з черги\"\r\n                      >\r\n                        🗑️\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"modal-actions\">\r\n          <button\r\n            onClick={closeUploadModal}\r\n            className=\"btn btn-secondary\"\r\n            disabled={isUploading}\r\n          >\r\n            {uploadQueue.length > 0 ? 'Закрити' : 'Скасувати'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GalleryUploadModal","import React from 'react'\r\nimport { GalleryImagesList, GalleryImageEditor, GalleryUploadModal } from '../../components/admin/gallery'\r\nimport AdminNavigation from '../../components/admin/navigation/AdminNavigation'\r\nimport '../../components/admin/products/products-admin.scss'\r\n\r\nconst GalleryManager = () => {\r\n  return (\r\n    <div className=\"gallery-manager\">\r\n      <AdminNavigation pageType=\"gallery\" />\r\n\r\n      <div className=\"gallery-manager-header\">\r\n        <h1>Управління галереєю</h1>\r\n        <p>Додавайте, редагуйте та організовуйте зображення проектів</p>\r\n      </div>\r\n\r\n      <div className=\"gallery-manager-content\">\r\n        <GalleryImagesList />\r\n        <GalleryImageEditor />\r\n        <GalleryUploadModal />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GalleryManager"],"names":["_ref","publicId","alt","width","height","className","quality","format","responsive","onClick","onLoad","onError","props","_objectWithoutProperties","_excluded","cloudName","process","REACT_APP_CLOUDINARY_CLOUD_NAME","imageUrl","buildImageUrl","w","h","cropMode","window","innerWidth","concat","_jsx","_objectSpread","src","loading","pageType","navigate","useNavigate","location","useLocation","logout","useAuthStore","config","getPageConfig","currentPath","pathname","includes","title","siteLink","siteLinkText","_jsxs","children","Link","to","href","target","rel","handleLogout","_Fragment","create","subscribeWithSelector","set","get","galleryImages","categories","id","name","ua","en","de","pl","isLoading","error","currentCategory","searchQuery","sortBy","isEditModalOpen","editingImage","isUploadModalOpen","uploadProgress","statistics","totalImages","imagesByCategory","recentUploads","loadGalleryImages","async","galleryProjects","transformedImages","map","project","category","tags","createdAt","Date","Math","floor","random","toISOString","updatedAt","stats","calculateStatistics","success","message","addGalleryImage","newImage","now","toString","substr","imageData","updatedImages","image","updateGalleryImage","imageId","updates","deleteGalleryImage","filter","deleteMultipleImages","imageIds","deletedCount","length","updateCategory","newCategory","tag","some","cat","updatedCount","setCurrentCategory","setSearchQuery","query","setSortBy","getFilteredImages","filtered","trim","toLowerCase","Object","values","text","sort","a","b","localeCompare","openEditModal","arguments","undefined","closeEditModal","openUploadModal","closeUploadModal","setUploadProgress","progress","images","reduce","acc","thirtyDaysAgo","exportGalleryData","dataStr","JSON","stringify","dataBlob","Blob","type","url","URL","createObjectURL","link","document","createElement","download","split","body","appendChild","click","removeChild","revokeObjectURL","clearError","GalleryImagesList","useAdminGalleryStore","selectedImages","setSelectedImages","useState","Set","showDeleteConfirm","setShowDeleteConfirm","bulkAction","setBulkAction","useEffect","filteredImages","getCategoryName","categoryId","find","keys","placeholder","value","onChange","e","size","label","selectedIds","Array","from","startsWith","replace","checked","handleSelectAll","img","_image$alt","_image$alt2","dateString","has","newSelected","delete","add","handleSelectImage","CloudinaryImage","toLocaleDateString","year","month","day","hour","minute","prev","newSet","handleDeleteImage","GalleryImageEditor","formData","setFormData","newTag","setNewTag","imagePreview","setImagePreview","_editingImage$tags","handleInputChange","field","lang","addTag","handleUrlPaste","extractedId","match","pop","_unused","extractPublicIdFromUrl","disabled","onSubmit","preventDefault","result","alert","required","parseInt","min","rows","index","removeTag","tagToRemove","onKeyPress","key","GalleryUploadModal","dragActive","setDragActive","uploadQueue","setUploadQueue","isUploading","setIsUploading","fileInputRef","useRef","defaultSettings","setDefaultSettings","generateAlt","autoTags","handleDrag","stopPropagation","handleFiles","files","imageFiles","file","newQueue","preview","status","generateAltText","filename","categoryNames","courtyard","walkway","plaza","driveway","uploadToCloudinary","FormData","append","REACT_APP_CLOUDINARY_UPLOAD_PRESET","response","fetch","method","ok","Error","statusText","json","public_id","secure_url","formatFileSize","bytes","i","log","parseFloat","pow","toFixed","onDragEnter","onDragLeave","onDragOver","onDrop","dataTransfer","_fileInputRef$current","current","ref","multiple","accept","style","display","clearCompleted","item","forEach","clearAll","pendingItems","completedCount","uploadResult","round","removeFromQueue","itemId","updated","GalleryManager","AdminNavigation"],"sourceRoot":""}