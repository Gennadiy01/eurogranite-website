{"version":3,"file":"static/js/982.5b2ea50c.chunk.js","mappings":"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","sources":["utils/cloudinaryUpload.js","components/admin/ImageUploader.jsx","pages/AdminUpload.jsx"],"sourcesContent":["// Utility for uploading images to Cloudinary with proper structure and tags\r\n\r\nconst CLOUDINARY_URL = `https://api.cloudinary.com/v1_1/${process.env.REACT_APP_CLOUDINARY_CLOUD_NAME}/image/upload`\r\n\r\n/**\r\n * Upload single image to Cloudinary with automatic categorization\r\n * @param {File} file - Image file to upload\r\n * @param {Object} metadata - Image metadata\r\n * @returns {Promise<Object>} Cloudinary response\r\n */\r\nexport const uploadImageToCloudinary = async (file, metadata) => {\r\n  const {\r\n    category = 'driveways',\r\n    graniteType = 'gabbro',\r\n    year = new Date().getFullYear(),\r\n    size = 'medium',\r\n    location = '',\r\n    description = ''\r\n  } = metadata\r\n\r\n  // Generate public_id based on category and timestamp\r\n  const timestamp = Date.now()\r\n  const publicId = `eurogranite/gallery/${category}/${category}-${timestamp}`\r\n\r\n  // Generate tags for filtering\r\n  const tags = [\r\n    'gallery',\r\n    category,\r\n    graniteType,\r\n    year.toString(),\r\n    size,\r\n    'granite-paving'\r\n  ].filter(Boolean)\r\n\r\n  // Create form data\r\n  const formData = new FormData()\r\n  formData.append('file', file)\r\n  formData.append('public_id', publicId)\r\n  formData.append('upload_preset', process.env.REACT_APP_CLOUDINARY_UPLOAD_PRESET)\r\n  formData.append('tags', tags.join(','))\r\n  formData.append('folder', `eurogranite/gallery/${category}`)\r\n\r\n  // Add context metadata\r\n  const context = {\r\n    category,\r\n    graniteType,\r\n    year: year.toString(),\r\n    size,\r\n    location,\r\n    description,\r\n    uploadDate: new Date().toISOString()\r\n  }\r\n\r\n  formData.append('context', Object.entries(context)\r\n    .map(([key, value]) => `${key}=${value}`)\r\n    .join('|'))\r\n\r\n  try {\r\n    const response = await fetch(CLOUDINARY_URL, {\r\n      method: 'POST',\r\n      body: formData\r\n    })\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Upload failed: ${response.statusText}`)\r\n    }\r\n\r\n    const result = await response.json()\r\n    console.log('✅ Image uploaded successfully:', result.public_id)\r\n    return result\r\n\r\n  } catch (error) {\r\n    console.error('❌ Upload error:', error)\r\n    throw error\r\n  }\r\n}\r\n\r\n/**\r\n * Upload multiple images with batch processing\r\n * @param {Array} files - Array of {file, metadata} objects\r\n * @param {Function} onProgress - Progress callback\r\n * @returns {Promise<Array>} Array of upload results\r\n */\r\nexport const uploadBatchImages = async (files, onProgress) => {\r\n  const results = []\r\n  const total = files.length\r\n\r\n  for (let i = 0; i < files.length; i++) {\r\n    const { file, metadata } = files[i]\r\n\r\n    try {\r\n      const result = await uploadImageToCloudinary(file, metadata)\r\n      results.push({ success: true, result })\r\n\r\n      if (onProgress) {\r\n        onProgress({\r\n          current: i + 1,\r\n          total,\r\n          percentage: Math.round(((i + 1) / total) * 100),\r\n          currentFile: file.name\r\n        })\r\n      }\r\n    } catch (error) {\r\n      results.push({ success: false, error, fileName: file.name })\r\n    }\r\n  }\r\n\r\n  return results\r\n}\r\n\r\n/**\r\n * Generate upload metadata from filename\r\n * @param {string} filename - Image filename\r\n * @returns {Object} Generated metadata\r\n */\r\nexport const parseFilenameMetadata = (filename) => {\r\n  // Example filename: \"driveway-001.jpg\"\r\n  const parts = filename.toLowerCase().replace(/\\.(jpg|jpeg|png|webp)$/i, '').split('-')\r\n\r\n  const metadata = {\r\n    category: 'driveways',\r\n    graniteType: 'gabbro',\r\n    size: 'medium',\r\n    year: new Date().getFullYear(),\r\n    location: ''\r\n  }\r\n\r\n  // Auto-detect category from filename (first part)\r\n  const categories = ['driveway', 'walkway', 'plaza', 'courtyard']\r\n  const foundCategory = categories.find(cat => parts[0] && parts[0].includes(cat))\r\n  if (foundCategory) {\r\n    metadata.category = foundCategory.endsWith('s') ? foundCategory : `${foundCategory}s`\r\n  }\r\n\r\n  // Auto-detect granite type\r\n  const graniteTypes = ['gabbro', 'black', 'grey', 'gray', 'red', 'brown', 'green', 'labradorite']\r\n  const foundGranite = graniteTypes.find(type => parts.includes(type))\r\n  if (foundGranite) {\r\n    if (foundGranite === 'black' || foundGranite === 'gabbro') metadata.graniteType = 'gabbro'\r\n    else if (foundGranite === 'grey' || foundGranite === 'gray') metadata.graniteType = 'real-grey'\r\n    else if (foundGranite === 'red' || foundGranite === 'brown') metadata.graniteType = 'rosso-santiago'\r\n    else if (foundGranite === 'green') metadata.graniteType = 'verde-oliva'\r\n    else if (foundGranite === 'labradorite') metadata.graniteType = 'ukrainian-labradorite-volga-blue'\r\n  }\r\n\r\n  // Auto-detect size\r\n  const sizes = ['small', 'medium', 'large']\r\n  const foundSize = sizes.find(size => parts.includes(size))\r\n  if (foundSize) metadata.size = foundSize\r\n\r\n  // Auto-detect year\r\n  const yearMatch = parts.find(part => /^\\d{4}$/.test(part))\r\n  if (yearMatch) metadata.year = parseInt(yearMatch)\r\n\r\n  // Auto-detect location\r\n  const locations = ['kyiv', 'lviv', 'kharkiv', 'odesa', 'dnipro']\r\n  const foundLocation = locations.find(loc => parts.includes(loc))\r\n  if (foundLocation) metadata.location = foundLocation.charAt(0).toUpperCase() + foundLocation.slice(1)\r\n\r\n  return metadata\r\n}\r\n\r\n/**\r\n * Validate image file before upload\r\n * @param {File} file - Image file to validate\r\n * @returns {Object} Validation result\r\n */\r\nexport const validateImageFile = (file) => {\r\n  const maxSize = 10 * 1024 * 1024 // 10MB\r\n  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp']\r\n\r\n  const errors = []\r\n\r\n  if (file.size > maxSize) {\r\n    errors.push(`File size (${Math.round(file.size / 1024 / 1024)}MB) exceeds 10MB limit`)\r\n  }\r\n\r\n  if (!allowedTypes.includes(file.type)) {\r\n    errors.push(`File type ${file.type} not supported. Use JPG, PNG, or WebP`)\r\n  }\r\n\r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors\r\n  }\r\n}","import React, { useState, useCallback } from 'react'\r\nimport { uploadBatchImages, parseFilenameMetadata, validateImageFile } from '../../utils/cloudinaryUpload'\r\nimport { projectCategories } from '../../constants/galleryData'\r\n\r\nconst ImageUploader = ({ onUploadComplete }) => {\r\n  const [files, setFiles] = useState([])\r\n  const [uploading, setUploading] = useState(false)\r\n  const [progress, setProgress] = useState(null)\r\n  const [results, setResults] = useState([])\r\n\r\n  const handleFileSelect = useCallback((e) => {\r\n    const selectedFiles = Array.from(e.target.files)\r\n    const validFiles = []\r\n\r\n    selectedFiles.forEach(file => {\r\n      const validation = validateImageFile(file)\r\n      if (validation.isValid) {\r\n        const metadata = parseFilenameMetadata(file.name)\r\n        validFiles.push({\r\n          file,\r\n          metadata,\r\n          preview: URL.createObjectURL(file),\r\n          id: Math.random().toString(36).substr(2, 9)\r\n        })\r\n      } else {\r\n        console.warn(`Invalid file ${file.name}:`, validation.errors)\r\n      }\r\n    })\r\n\r\n    setFiles(prev => [...prev, ...validFiles])\r\n  }, [])\r\n\r\n  const handleMetadataChange = useCallback((fileId, field, value) => {\r\n    setFiles(prev => prev.map(f =>\r\n      f.id === fileId\r\n        ? { ...f, metadata: { ...f.metadata, [field]: value } }\r\n        : f\r\n    ))\r\n  }, [])\r\n\r\n  const handleRemoveFile = useCallback((fileId) => {\r\n    setFiles(prev => {\r\n      const file = prev.find(f => f.id === fileId)\r\n      if (file?.preview) {\r\n        URL.revokeObjectURL(file.preview)\r\n      }\r\n      return prev.filter(f => f.id !== fileId)\r\n    })\r\n  }, [])\r\n\r\n  const handleUpload = async () => {\r\n    if (files.length === 0) return\r\n\r\n    setUploading(true)\r\n    setProgress({ current: 0, total: files.length, percentage: 0 })\r\n\r\n    try {\r\n      const uploadData = files.map(f => ({\r\n        file: f.file,\r\n        metadata: f.metadata\r\n      }))\r\n\r\n      const results = await uploadBatchImages(uploadData, setProgress)\r\n      setResults(results)\r\n\r\n      const successCount = results.filter(r => r.success).length\r\n      console.log(`✅ Upload complete: ${successCount}/${files.length} files uploaded successfully`)\r\n\r\n      if (onUploadComplete) {\r\n        onUploadComplete(results)\r\n      }\r\n\r\n      // Clear successful uploads\r\n      const failedIds = results\r\n        .map((result, index) => result.success ? null : files[index].id)\r\n        .filter(Boolean)\r\n\r\n      setFiles(prev => prev.filter(f => failedIds.includes(f.id)))\r\n\r\n    } catch (error) {\r\n      console.error('Upload failed:', error)\r\n    } finally {\r\n      setUploading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"image-uploader\">\r\n      <div className=\"upload-controls\">\r\n        <input\r\n          type=\"file\"\r\n          multiple\r\n          accept=\"image/jpeg,image/jpg,image/png,image/webp\"\r\n          onChange={handleFileSelect}\r\n          disabled={uploading}\r\n          className=\"file-input\"\r\n        />\r\n\r\n        {files.length > 0 && (\r\n          <button\r\n            onClick={handleUpload}\r\n            disabled={uploading}\r\n            className=\"upload-button\"\r\n          >\r\n            {uploading ? 'Uploading...' : `Upload ${files.length} image(s)`}\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      {progress && (\r\n        <div className=\"upload-progress\">\r\n          <div className=\"progress-bar\">\r\n            <div\r\n              className=\"progress-fill\"\r\n              style={{ width: `${progress.percentage}%` }}\r\n            />\r\n          </div>\r\n          <span>{progress.current}/{progress.total} ({progress.percentage}%)</span>\r\n          {progress.currentFile && <span>Uploading: {progress.currentFile}</span>}\r\n        </div>\r\n      )}\r\n\r\n      {files.length > 0 && (\r\n        <div className=\"files-preview\">\r\n          {files.map(fileData => (\r\n            <div key={fileData.id} className=\"file-preview-card\">\r\n              <img\r\n                src={fileData.preview}\r\n                alt={fileData.file.name}\r\n                className=\"preview-image\"\r\n              />\r\n\r\n              <div className=\"file-metadata\">\r\n                <h4>{fileData.file.name}</h4>\r\n\r\n                <div className=\"metadata-field\">\r\n                  <label>Category:</label>\r\n                  <select\r\n                    value={fileData.metadata.category}\r\n                    onChange={(e) => handleMetadataChange(fileData.id, 'category', e.target.value)}\r\n                  >\r\n                    {projectCategories.map(cat => (\r\n                      <option key={cat.id} value={cat.id}>{cat.name.en}</option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"metadata-field\">\r\n                  <label>Additional Notes (optional):</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Optional description or notes\"\r\n                    value={fileData.metadata.notes || ''}\r\n                    onChange={(e) => handleMetadataChange(fileData.id, 'notes', e.target.value)}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"metadata-field\">\r\n                  <label>Year:</label>\r\n                  <input\r\n                    type=\"number\"\r\n                    min=\"2020\"\r\n                    max={new Date().getFullYear() + 1}\r\n                    value={fileData.metadata.year}\r\n                    onChange={(e) => handleMetadataChange(fileData.id, 'year', parseInt(e.target.value))}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"metadata-field\">\r\n                  <label>Location:</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={fileData.metadata.location}\r\n                    onChange={(e) => handleMetadataChange(fileData.id, 'location', e.target.value)}\r\n                    placeholder=\"e.g., Kyiv\"\r\n                  />\r\n                </div>\r\n\r\n                <button\r\n                  onClick={() => handleRemoveFile(fileData.id)}\r\n                  className=\"remove-button\"\r\n                  disabled={uploading}\r\n                >\r\n                  Remove\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {results.length > 0 && (\r\n        <div className=\"upload-results\">\r\n          <h3>Upload Results:</h3>\r\n          {results.map((result, index) => (\r\n            <div key={index} className={`result-item ${result.success ? 'success' : 'error'}`}>\r\n              {result.success ? (\r\n                <span>✅ {result.result.public_id}</span>\r\n              ) : (\r\n                <span>❌ {result.fileName}: {result.error.message}</span>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ImageUploader","import React from 'react'\r\nimport ImageUploader from '../components/admin/ImageUploader'\r\nimport '../components/admin/ImageUploader.scss'\r\n\r\nconst AdminUpload = () => {\r\n  const handleUploadComplete = (results) => {\r\n    console.log('Upload completed:', results)\r\n\r\n    // Тут можна автоматично оновити galleryData.js або зберегти в базі даних\r\n    const successfulUploads = results.filter(r => r.success)\r\n\r\n    if (successfulUploads.length > 0) {\r\n      console.log('✅ Successfully uploaded images:')\r\n      successfulUploads.forEach(upload => {\r\n        console.log(`- ${upload.result.public_id}`)\r\n        console.log(`  URL: ${upload.result.secure_url}`)\r\n        console.log(`  Tags: ${upload.result.tags?.join(', ')}`)\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"admin-upload-page\">\r\n      <div className=\"container\" style={{ maxWidth: '1200px', margin: '2rem auto', padding: '0 1rem' }}>\r\n        <h1 style={{ textAlign: 'center', marginBottom: '2rem', color: '#1f2937' }}>\r\n          EuroGranite Gallery Image Upload\r\n        </h1>\r\n\r\n        <div style={{\r\n          background: '#f0f9ff',\r\n          padding: '1rem',\r\n          borderRadius: '0.5rem',\r\n          marginBottom: '2rem',\r\n          border: '1px solid #bfdbfe'\r\n        }}>\r\n          <h3 style={{ margin: '0 0 0.5rem 0', color: '#1e40af' }}>📁 Рекомендації по іменуванню файлів:</h3>\r\n          <ul style={{ margin: 0, paddingLeft: '1.5rem', color: '#1e40af' }}>\r\n            <li><code>black-granite-driveway-large-2024-kyiv.jpg</code></li>\r\n            <li><code>grey-granite-walkway-medium-2023.png</code></li>\r\n            <li><code>labradorite-plaza-large-2024-lviv.webp</code></li>\r\n          </ul>\r\n          <p style={{ margin: '0.5rem 0 0 0', fontSize: '0.875rem', color: '#3730a3' }}>\r\n            Система автоматично розпізнає категорію, тип граніту, розмір та інші параметри з назви файлу.\r\n          </p>\r\n        </div>\r\n\r\n        <ImageUploader onUploadComplete={handleUploadComplete} />\r\n\r\n        <div style={{\r\n          background: '#f0fdf4',\r\n          padding: '1rem',\r\n          borderRadius: '0.5rem',\r\n          marginTop: '2rem',\r\n          border: '1px solid #bbf7d0'\r\n        }}>\r\n          <h3 style={{ margin: '0 0 0.5rem 0', color: '#166534' }}>🔧 Наступні кроки:</h3>\r\n          <ol style={{ margin: 0, paddingLeft: '1.5rem', color: '#166534' }}>\r\n            <li>Завантажте зображення через форму вище</li>\r\n            <li>Перевірте метадані кожного зображення</li>\r\n            <li>Натисніть \"Upload\" для завантаження в Cloudinary</li>\r\n            <li>Скопіюйте public_id завантажених зображень</li>\r\n            <li>Додайте їх до <code>galleryData.js</code></li>\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AdminUpload"],"names":["CLOUDINARY_URL","concat","process","REACT_APP_CLOUDINARY_CLOUD_NAME","uploadImageToCloudinary","async","file","metadata","category","graniteType","year","Date","getFullYear","size","location","description","timestamp","now","publicId","tags","toString","filter","Boolean","formData","FormData","append","REACT_APP_CLOUDINARY_UPLOAD_PRESET","join","context","uploadDate","toISOString","Object","entries","map","_ref","key","value","response","fetch","method","body","ok","Error","statusText","result","json","console","log","public_id","error","onUploadComplete","files","setFiles","useState","uploading","setUploading","progress","setProgress","results","setResults","handleFileSelect","useCallback","e","selectedFiles","Array","from","target","validFiles","forEach","validation","errors","push","Math","round","includes","type","isValid","length","validateImageFile","filename","parts","toLowerCase","replace","split","foundCategory","find","cat","endsWith","foundGranite","foundSize","yearMatch","part","test","parseInt","foundLocation","loc","charAt","toUpperCase","slice","parseFilenameMetadata","name","preview","URL","createObjectURL","id","random","substr","warn","prev","handleMetadataChange","fileId","field","f","_objectSpread","handleRemoveFile","revokeObjectURL","_jsxs","className","children","_jsx","multiple","accept","onChange","disabled","onClick","current","total","percentage","uploadData","onProgress","i","success","currentFile","fileName","uploadBatchImages","successCount","r","failedIds","index","style","width","fileData","src","alt","projectCategories","en","placeholder","notes","min","max","message","AdminUpload","maxWidth","margin","padding","textAlign","marginBottom","color","background","borderRadius","border","paddingLeft","fontSize","ImageUploader","successfulUploads","upload","_upload$result$tags","secure_url","marginTop"],"sourceRoot":""}